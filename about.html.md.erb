---
title: About the On-Demand Service Broker SDK
owner: London Services Enablement
---

## <a id="cf-broker"></a>Cloud Foundry Service Tiles and Brokers

PCF cloud operators make software services available to PCF developers by finding them on [Pivotal Network](https://network.pivotal.io/) and then installing and configuring them through a tile interface in the Ops Manager **Installation Dashboard**. Developers then create instances of the service to run within their spaces, bind these instances to their apps, and call the services from their application code.

The software behind the tiles includes everything needed to make the service easy for operators to install and maintain, and easy for developers to use. Tile software components include configuration layouts, Bosh manifests for deploying service instances, and a service broker that the Cloud Controller calls to deploy and manage service instances. When an operator installs a service tile they are creating a service broker.

Cloud Foundry service brokers are implemented as HTTP servers that conform to the [service broker API](http://docs.cloudfoundry.org/services/api.html). In addition to providing an API to the Cloud Controller, a service broker also publishes a catalog that can include multiple service plans, such as a free tier and a metered tier. Brokers register their service plans with the Cloud Controller to populate the services marketplace, and developers access the marketplace with `cf marketpace` or through the Apps Manager.

## <a id="service-network"></a>Bosh 2.0 and Service Networks

Before Bosh 2.0, cloud operators pre-provisioned service instances from Ops Manager. In the Ops Manager Director **Networking** pane, they allocated a block of IP addresses for the service instance pool, and under **Resource Config** they provisioned pool VM resources, specifying the CPU, hard disk, and RAM they would use. All instances had to be provisioned at the same level. With each `create-service` request from a developer, Ops Manager handed out a static IP address from this block, and with each `delete-service` it cleaned up the VM and added it back to the available pool.

With Bosh 2.0 dynamic networking and Cloud Foundry asynchronous service provisioning, operators can now define a dynamically-provisioned service network that hosts instances more flexibly. The service network runs separate from the PCF default network. While the default network hosts VMs launched by Ops Manager, VMs running in the service network are created and provisioned on-demand by Bosh.

To create a service network, you add a network in the Ops Man Director tile **Create Networks** pane and select its **Service Network** checkbox. This prevents Ops Manager from creating VMs in the network, leaving instance creation to the underlying Bosh.

## <a id="on-demand"></a>On-Demand Services

On-demand services use the dynamically-provisioned service network to host the single-tenant worker VMs that run as service instances within development spaces. This architecture lets developers provision IaaS resources for their service instances at creation time, rather than the operator pre-provisioning a fixed quantity of IaaS resources when they deploy the service broker.

By making services single-tenant, where each instance runs on a dedicated VM rather than sharing VMs with unrelated processes, on-demand services eliminate the "noisy neighbor" problem when one application hogs resources on a shared cluster. Single-tenant services can also support regulatory compliance where sensitive data must be compartmentalized.

An on-demand service splits its operations between the default network and the service network. Shared components of the service, such as executive controllers and databases, run centrally on the default network along with the Cloud Controller, UAA, and other PCF components. The space-specific worker pool runs on the service network.

## <a id="odb-sdk"></a>The On-Demand Service Broker SDK

The on-demand service broker SDK (ODB SDK) is an SDK you can use to create on-demand service brokers for single-tenant service offerings.

The ODB SDK simplifies service tile authoring, and is the standard approach for both Pivotal internal services teams and Pivotal partner independent software vendors (ISVs) to develop on-demand services for PCF.

The ODB SDK provides a generic on-demand service broker (ODB) that answers API calls from the Cloud Controller. The service author plugs service-specific functionality into the ODB SDK via an executable called a **Service Adapter**. For more information about the responsibilities of service authors, please see [Creating the Service Author Deliverables](creating.html).

No additional or third-party components other than the service broker and the BOSH release for the service itself are required. This simplifies the setup. Everything is done through the single install process. This approach also simplifies support because there are fewer moving parts, and your customer's network needs less customizing of DNS rules and additional firewall ports.

This approach imposes no constraints on the service authors' ability to offer new functionality or expose configuration options in their service plans, such as rate limiting and external load balancers.

## <a id="adapter"></a>Service Adapters

A service adapter is a binary that is called out by the ODB when it wants to do service-specific tasks.

![responsibility-diagram](img/responsibility-diagram.png)
The above diagram shows where responsibility lies for each aspect of the ODB workflow.

The service author can focus on building the BOSH release of their service and provide a service adapter binary that manages manifest generation,  binding, and unbinding. The ODB manages all interactions with Cloud Foundry and BOSH.

The operator then configures a range of plans for the service in the ODB BOSH manifest. This gives the operator control of what service configurations to offer their app developers. It also gives operators a consistent experience installing, configuring, and upgrading Pivotal products.

## <a id="why-od"></a>Benefits of ODB

The benefits of provisioning IaaS resources on-demand are:

* Scale resource consumption linearly with need, without having to plan for pre-provisioning.
* App developers get more control over resources, and do not have to do acquire them through the operator.

## <a id="why-use-odb"></a>The benefits of using ODB to develop on-demand service offerings are:

* ODB reduces the amount of code service developers have to write by abstracting away functionality common to most single-tenant on-demand service brokers.
* ODB uses BOSH to deploy service instances, so anything that is BOSH-deployable can integrate with Cloud Foundry's services marketplace.

### <a id="bosh-v2"></a>BOSH v2 Features Used

ODB uses the following BOSH features:

* Dynamic IP management
* Availability zones
* Globally-defined resources (**Cloud Config**). This results in manifests that are portable across BOSH CPIs, and are substantially smaller than old-style manifests.
* Links between deployed BOSH instances consuming information, e.g. IP addresses, of other instances.

## <a id="steps"></a>Procedures for Using ODB

The following procedures outline how to set up, create and maintain a service tile based on the ODB SDK:

* [Setting up your BOSH director](operating.html#configure-bosh) — The operators ensure that minimum versions of Cloud Foundry and BOSH are available.
* [Creating the Service Author Deliverables](creating.html) — The service authors provide their deliverables.
* [Deploying an On-Demand Service Broker](operating.html) — The operators upload their releases and write a manifest.

**[Back to Contents Page](index.html)**
