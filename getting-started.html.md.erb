---
title: Setting up a local environment
owner: London Services Enablement
---

This topic describes how to create and manage an On-Demand Service Broker (ODB) using BOSH lite and PCF Dev. This topic describes how to use the following Apache Kafka service broker examples:

* [Kafka Service Adapter](https://github.com/pivotal-cf-experimental/kafka-example-service-adapter)
* [Kafka Service Release](https://github.com/pivotal-cf-experimental/kafka-example-service-release)



## Prerequisites

Before configuring an on-demand service broker to run locally, install and configure the following:

- [BOSH Lite](https://github.com/cloudfoundry/bosh-lite#install-bosh-lite)

<p class="note"><strong>Note</strong>: BOSH Lite does not contain a current version of the BOSH director to run the On-Demand Service Broker. The minimum required versions of Cloud Foundry and BOSH are described in <a href="./operating.html#configure-bosh">the operator section.</a></p>

- [PCF Dev](https://docs.pivotal.io/pcf-dev/#installing)


<p class="note">For PCFDev to route requests to the deployments on BOSH Lite ensure you run the script `bin/add-route` in the BOSH Lite repository. You may need to run this again if your networking is reset (e.g. reboot, or connecting to a different network).</p>

## Task 1: Setup BOSH

After installing BOSH Lite, target the BOSH Lite director and upload the stemcell.

1. Target your BOSH Lite director:
   <pre class="terminal">
    $ bosh target
    Current target is https<span>:</span>//192.0.2.4:25555 (Bosh Lite Director)
   </pre>

1. Upload the [BOSH Lite stemcell](http://bosh.cloudfoundry.org/stemcells/bosh-warden-boshlite-ubuntu-trusty-go_agent):
   <pre class="terminal">
    $ bosh upload stemcell https<span>:</span>//bosh.io/d/stemcells/bosh-warden-boshlite-ubuntu-trusty-go_agent?v=3147
   </pre>

## Task 2: Download and Configure the Apache Kafka Service Release

To download and configure the 

1. Clone the [kafka service release](https://github.com/pivotal-cf-experimental/kafka-example-service-release) in your workspace:
   <pre class="terminal">
    $ git clone https<span>:</span>//github.com/pivotal-cf-experimental/kafka-example-service-release.git
   </pre>

1. Create and upload the kafka service release on the director:
   <pre class="terminal">
    $ cd kafka-example-service-release
    $ bosh create release --name kafka-example-service
    $ bosh upload release
   </pre>

## Task 3: Download and Configure the Kafka Service Adapter Release

1. Clone the [kafka service adapter release](https://github.com/pivotal-cf-experimental/kafka-example-service-adapter-release) and run `git submodule update --init` to bring in the adapter's dependencies
   <pre class="terminal">
    $ git clone https<span>:</span>//github.com/pivotal-cf-experimental/kafka-example-service-adapter-release.git
   </pre>

1. Download the service adapter dependencies:
  <pre class="terminal">
    $ cd kafka-example-service-adapter-release
    $ git submodule update --init --recursive
  </pre>

1. Create and upload the kafka example service adapter release on the director
  <pre class="terminal">
    $ bosh create release --name kafka-example-service-adapter
    $ bosh upload release
  </pre>

## Task 4: Download and Configure On-Demand Service Broker

1. Clone the [on demand service broker release](https://github.com/pivotal-cf/on-demand-service-broker-release)
  <pre class="terminal">
    $ git clone https://github.com/pivotal-cf/on-demand-service-broker-release.git
    $ cd on-demand-service-broker-release
    $ git submodule update --init --recursive
  </pre>

1. Create and upload the [on demand service broker release](https://github.com/pivotal-cf/on-demand-service-broker-release)
  <pre class="terminal">
    $ bosh create release --name on-demand-service-broker
    $ bosh upload release
  </pre>


## Task 5: Configure the BOSH Lite Director

1. Create a new directory in your workspace and a `cloud_config.yml` for the BOSH Lite Director. For example:
  <code>
    yaml
    ---
    azs:
    - name: z1

    vm_types:
    - name: container
      cloud_properties: {}

    networks:
    - name: kafka
      type: manual
      subnets:
      - range: 192.0.2.0/24
        gateway: 192.0.2.1
        az: lite
        cloud_properties: {}
        az: z1

    disk_types:
    - name: ten
      disk_size: 10_000
      cloud_properties: {}

    azs:
    - name: lite
      cloud_properties: {}

    compilation:
      workers: 2
      reuse_compilation_vms: true
      network: kafka
      az: lite
      cloud_properties: {}
  </code>

1. Update the BOSH Lite cloud config.
  <pre class="terminal">
    $ bosh update cloud-config cloud_config.yml
  </pre>

1. Get BOSH Lite director information
  <pre class="terminal">
    $ bosh status
  </pre>
  Results in a output like:
  <pre class="terminal">
    â†’ bosh status
    Config
                 /Users/pivotal/.bosh_config

    Director
      Name       Bosh Lite Director
      URL        https://192.0.2.4:25555
      Version    1.3215.0 (00000000)
      User       admin
      UUID       17a45148-1d00-43bc-af28-9882e5a6535a
      CPI        warden_cpi
      dns        disabled
      compiled_package_cache enabled (provider: local)
      snapshots  disabled
  </pre>

  Note the director URL and director UUID as they will be used in the next step.

1. Create a BOSH Lite manifest for the deployment named `deployment_manifest.yml`. 

    Use the following as a sample for your manifest. Replace `BOSH_LITE_UUID` and `BOSH_LITE_IP` with the value obtained in the previous step. 
    <code>
    yaml
    ---
    name: kafka-on-demand-broker

    director_uuid: BOSH_LITE_UUID

    releases:
      - name: &amp;broker-release on-demand-service-broker
        version: latest
      - name: &amp;service-adapter-release kafka-example-service-adapter
        version: latest
      - name: &amp;service-release kafka-example-service
        version: latest

    stemcells:
      - alias: trusty
        os: ubuntu-trusty
        version: latest

    instance_groups:
      - name: broker
        azs: [z1]
        instances: 1
        jobs:
          - name: broker
            release: *broker-release
            properties:
              port: 8080
              username: broker #or replace with your own
              password: password #or replace with your own
              disable_ssl_cert_verification: true
              bosh:
                url: BOSH_LITE_IP_ADDRESS
                authentication:
                  basic:
                    username: admin
                    password: admin
              service_adapter:
                path: /var/vcap/packages/kafka-service-adapter/bin/service-adapter
              service_deployment:
                releases:
                  - name: *service-release
                    version: latest
                    jobs: [kafka_server, zookeeper_server]
                stemcell:
                  os: ubuntu-trusty
                  version: latest
              service_catalog:
                id: D94A086D-203D-4966-A6F1-60A9E2300F72
                service_name: kafka-service-with-odb
                service_description: Kafka Service
                bindable: true
                plan_updatable: true
                tags: [kafka]
                plans:
                  - name: small
                    plan_id: 11789210-D743-4C65-9D38-C80B29F4D9C8
                    description: A Kafka deployment with a single instance of each job and persistent disk
                    instance_groups:
                      - name: kafka_server
                        vm_type: container
                        instances: 1
                        azs: [z1]
                        persistent_disk: ten
                        azs: [lite]
                        networks: [kafka]
                      - name: zookeeper_server
                        vm_type: container
                        instances: 1
                        azs: [z1]
                        persistent_disk: ten
                        azs: [lite]
                        networks: [kafka]
                    properties:
                      auto_create_topics: true
                      default_replication_factor: 1
          - name: kafka-service-adapter
            release: *service-adapter-release

        vm_type: container
        persistent_disk_type: ten
        stemcell: trusty
        azs: [lite]
        networks:
          - name: kafka

    update:
      canaries: 1
      canary_watch_time: 30000-180000
      update_watch_time: 30000-180000
      max_in_flight: 4
    </code>

1. Deploy using the manifest from the previous step
    <pre class="terminal">
    $ bosh deployment deployment_manifest.yml
    $ bosh deploy
    </pre>

1. Find out the ip address of the broker that was deployed with the `instances` BOSH command  d s
    <pre class="terminal">
    bosh instances
    </pre>

    Sample output:

    <code>
    Acting as client 'admin' on deployment 'kafka-on-demand-broker' on 'Bosh Lite Director'

    Director task 147

    Task 147 done

    +--------------------------------------------------+---------+-----+-----------+------------+
    | Instance                                         | State   | AZ  | VM Type   | IPs        |
    +--------------------------------------------------+---------+-----+-----------+------------+
    | broker/0 (59231277-d7b8-46bb-8bbb-8154b6bae347)* | running | n/a | container | 192.0.2.2 |
    +--------------------------------------------------+---------+-----+-----------+------------+

    (*) Bootstrap node

    Instances total: 1
    </code>
    Note the IP address of the broker.

1. Create a service broker on PCF dev and enable access to its service offering. You will need the broker's credentials set in the deployment manifest and the IP of the broker VM.
    <pre class="terminal">
    cf create-service-broker kafka-broker broker password http://<REPLACE_WITH_BROKER_IP>:8080
    </pre>

    For more details on service brokers see [here](http://docs.cloudfoundry.org/services/api.html).

1. Enable access to the broker's service plans:
    <pre class="terminal">
    cf enable-service-access kafka-service-with-odb
    </pre>

    See the services offered by the broker in the marketplace:

    <pre class="terminal">
    cf marketplace
    </pre>

    Sample output:

    <pre class="terminal">
    Getting services from marketplace in org pcfdev-org / space pcfdev-space as admin...
    OK

    service                  plans        description
    kafka-service-with-odb   small        Kafka Service
    p-mysql                  512mb, 1gb   MySQL databases on demand
    p-rabbitmq               standard     RabbitMQ is a robust and scalable high-performance multi-protocol messaging broker.
    p-redis                  shared-vm    Redis service to provide a key-value store
    </pre>

1. Create a service instance using the Kafka on-demand service broker.

    <pre class="terminal">
    cf create-service kafka-service-with-odb small k1
    </pre>

1. Check the status of your service. Initially, it should be `create in progress`. Eventually, it should be `create succeeded`.

    <pre class="terminal">
    cf service k1
    </pre>

1. Check the BOSH deployment to see the on demand service provisioned by ODB.

    <pre class="terminal">
    bosh deployments
    </pre>

    Sample output:

    <pre class="terminal">
    +-------------------------------------------------------+---------------------------------------+--------------------------------------------------+--------------+
    | Name                                                  | Release(s)                            | Stemcell(s)                                      | Cloud Config |
    +-------------------------------------------------------+---------------------------------------+--------------------------------------------------+--------------+
    | kafka-on-demand-broker                                | kafka-example-service-adapter/0+dev.2 | bosh-warden-boshlite-ubuntu-trusty-go_agent/3147 | latest       |
    |                                                       | on-demand-service-broker/0.2.0+dev.1  |                                                  |              |
    +-------------------------------------------------------+---------------------------------------+--------------------------------------------------+--------------+
    | service-instance_2715262c-8564-4cd9-b629-0ae99e6aa4b9 | kafka-example-service/0+dev.2         | bosh-warden-boshlite-ubuntu-trusty-go_agent/3147 | latest       |
    +-------------------------------------------------------+---------------------------------------+--------------------------------------------------+--------------+
    </pre>

    Note the service instance has been provisioned with the service releases specified in the ODB deployment manifest.
